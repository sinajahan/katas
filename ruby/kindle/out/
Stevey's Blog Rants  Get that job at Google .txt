


Me: Yeah, that's at least partly true. Heck, I kinda didn't make it in on my first attempt, but I begged like a street dog until they gave me a second round of interviews. I caught them in a weak moment. And the second time around, I prepared, and did much better. 



you got unlucky and got an Interview Anti-Loop Oh no, not the Interview Anti-Loop! 



Long-term warming up means: study and practice for a week or two before the interview. 



Short-term warming up means: get lots of rest the night before, and then do intense, fast-paced 



Study a data-structures and algorithms book. Why? Because it is the most likely to help you beef up on problem identification. 



Steven Skiena's The Algorithm Design Manual. More than any other book it helped me understand 



recommend Introduction to Algorithms. It's a true classic and an invaluable resource, but it will probably take you more than 2 weeks to get through 



interview you. The friend should ask you a random interview question, and you should go write it on the board. 



whiteboard coding 



Drink some coffee: it actually helps you think faster, believe it or not. 



immediately before you walk into the interview. Treat it like a sports game or a music recital, or heck, an exam: if you go in warmed up you'll give your best performance. 



The best way to appear arrogant is to question the validity of the interviewer's question â€“ it really ticks them off, as I pointed out earlier on. 



Feel free to ask for help or hints if you're stuck. 



Some interviewers will not ask you to write code, but they will expect you to start writing code on the whiteboard at some point during your answer. 



So ask. Ask if they care about syntax, and if they do, try to get it right. 



Look over your code carefully from different angles and distances. Pretend it's someone else's code and you're tasked with finding bugs in 



It's OK (and highly encouraged) to ask a few clarifying questions, and occasionally verify with the interviewer that you're on the track they want you to be on. 



One last non-technical tip: bring your own whiteboard dry-erase markers. They sell pencil-thin ones at office supply stores, whereas most companies (including Google) tend to stock the fat kind. The thin ones turn your whiteboard from a 480i standard-definition 



need to know Big-O. 



Sorting: know how to sort. Don't do bubble-sort. You should know the details of at least one n*log(n) sorting algorithm, preferably two (say, quicksort and merge sort). 



You should be able to implement one using only arrays in your favorite language, in about the space of one interview. 



You should be familiar with at least one flavor of balanced binary tree, 



Hashtables: 



Graphs 



There are three basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list), and you should familiarize yourself with each representation and its pros and cons. 



Whenever someone gives you a problem, think graphs. They are the most fundamental and flexible way of representing any kind of a relationship, 



Whenever someone gives you a problem, think graphs. They are the most fundamental and flexible way of representing any kind of a relationship, so it's about a 50-50 shot that any interesting design problem has a graph involved in it. Make absolutely sure you can't think of a way to solve it using graphs before moving on to other solution types. This tip is important! 



Sadly, I don't have a good recommendation for a Discrete Math book, so if you do, please mention it in the comments. Thanks. 



and it's pretty fundamental, so you should know it. Know about locks and mutexes and semaphores and monitors and how they work. Know about deadlock and livelock and how to avoid them. 



Operating Systems 



The best, most practical book I've ever personally read on the subject is Doug Lea's Concurrent Programming in Java. It got me the most bang per page. 



Send me your resume I'll probably batch up any resume submissions 



study up! You have a lot of warming up to do. Real-world work makes you rusty. 



MIT OpenCourseWare has 



For those of you who might be considering taking the dive and applying at Google I have one more suggestion. Apply with us at Valve Software (you know, the video game company? Half-Life? Counter-Strike? Steam?) too. You'll get put through a very tough interview process similar to Google's and it will be a great warmup for your Google interviews if nothing more. 



Plus, don't ask the interviewer to repeat themselves. Take notes or interview on a speakerphone in front of a whiteboard. 



bringing in your own whiteboard markers is smart. I'd give credit for preparedness. 
